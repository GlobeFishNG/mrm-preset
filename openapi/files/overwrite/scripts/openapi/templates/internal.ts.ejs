/**
 * This file was automatically generated by \`npm run openapi:codegen\`.
 * DO NOT MODIFY IT MANUALLY. Instead, modify the source OpenAPI/Swagger YAML file,
 * and run \`npm run openapi:codegen\` to regenerate this file.
 */

/* eslint-disable prefer-arrow/prefer-arrow-functions */
// ------- automatically generated code start ---------

import * as express from 'express';
import * as bodyParser from 'body-parser';
import * as http from 'http';
import * as https from 'https';
import { router } from './access/<%= app.name %>.router';
import {
  useCustomizedHandlerBeforeRouter,
  useCustomizedHandlerAfterRouter,
  errorHandler,
  healthCheck,
} from './<%= app.name %>.appprocessor';

const logger = applog.logger('<%= app.name %>app');

let internalService: http.Server | https.Server;

export async function start(): Promise<void> {
  internalService = startInternalService(server(), <%= app.port %>, (error: Error) => {
    logger.error('start API <%= app.name %> failed, error is: ', error);
    process.exit(1);
  });
}

export async function stop(): Promise<void> {
  internalService.close();
}

export function server(): express.Express {
  const app = express();
  app.use(bodyParser.json());
  app.use(expressTrace.trace({
    serviceName: utils.getModuleName()!,
    setHeader: true
  }));
  app.get('/health', healthCheck);
  useCustomizedHandlerBeforeRouter(app);
<% if (!app.basePath) { -%>
  app.use(router());
<% } else { -%>
  app.use('<%= app.basePath -%>', router());
<% } -%>
  useCustomizedHandlerAfterRouter(app);
  app.use(errorHandler);
  return app;
}

// ------- automatically generated code stop ---------
/* eslint-enable prefer-arrow/prefer-arrow-functions */