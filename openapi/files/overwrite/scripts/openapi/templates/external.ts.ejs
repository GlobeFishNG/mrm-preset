/**
 * This file was automatically generated by \`yarn openapi:codegen\`.
 * DO NOT MODIFY IT MANUALLY. Instead, modify the source OpenAPI/Swagger YAML file,
 * and run \`yarn openapi:codegen\` to regenerate this file.
 */

/* eslint-disable prefer-arrow/prefer-arrow-functions */
// ------- automatically generated code start ---------

import * as express from 'express';
import * as helmet from 'helmet';
import * as http from 'http';
import * as https from 'https';
import { applog, startInternalService, addTransactionId } from '@ngiq/nodejs-common';
import { router } from './access/<%= app.name %>.router';
import {
  getHttpServerOptions,
  getHttpsServerOptions,
  useCustomizedHandlerBeforeRouter,
  useCustomizedHandlerAfterRouter,
  errorHandler,
  healthCheck,
} from './<%= app.name %>.appprocessor';

const logger = applog.logger('<%= app.name %>app');

const address: string = <string><%- app.network === 'access-network' ? 'process.env.ACCESS_IP' : 'process.env.INTRANET_IP' %>;

let httpsServer: https.Server;
let httpServer: http.Server;

export function server(): express.Express {
  const app = express();
  app.enable('trust proxy');
  app.use(helmet());
  app.use(express.json());
  app.get('/health', healthCheck);
  app.get('/health/test', healthCheck);
  app.head('/health', healthCheck);
  app.head('/health/test', healthCheck); 
  app.use(addTransactionId);
  useCustomizedHandlerBeforeRouter(app);
<% if (!app.basePath) { -%>
  app.use(router());
<% } else { -%>
  app.use('<%= app.basePath -%>', router());
<% } -%>
  useCustomizedHandlerAfterRouter(app);
  app.use(errorHandler);
  return app;
}

export async function start(): Promise<void> {
  const httpsServerOptions = getHttpsServerOptions();
  const httpServerOptions = getHttpServerOptions();
  const serverApp = server();

  httpsServer = await httpsserver.createHttpsServer(
    httpsServerOptions.httpsOptions,
    serverApp,
    address, httpsServerOptions.port,
    '<%= app.name %>');
  
  httpsServer.on('error', (error) => {
    logger.error('failed to start HTTPs server:', error);
    process.exit(1);
  });

  httpServer = http.createServer(serverApp).listen(
    httpServerOptions.port, address);
  
  httpServer.on('error', (error) => {
    logger.error('failed to start HTTPs server:', error);
    process.exit(1);
  });
}

export async function stop(): Promise<void> {
  httpServer.close();
  httpsServer.close();
}

// ------- automatically generated code stop ---------
/* eslint-enable prefer-arrow/prefer-arrow-functions */